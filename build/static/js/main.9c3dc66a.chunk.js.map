{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","newObject","axios","post","then","response","data","id","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","notesToShow","filter","errorMessage","setErrorMessage","useEffect","get","res","map","console","log","find","n","changedNote","noteService","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","target","noteObject","date","Date","toISOString","Math","random","initialNotes","concat","value","onChange","type","ReactDOM","render","document","getElementById"],"mappings":"8LAYeA,EAVF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAL,sCACd,OACE,qBAAIC,UAAU,OAAd,UACGJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,QCNpCK,EAAO,aAiBE,EAVA,SAACC,GAEd,OADgBC,IAAMC,KAAKH,EAASC,GACrBG,MAAK,SAACC,GAAD,OAAcA,EAASC,SAQ9B,EALA,SAACC,EAAIN,GAElB,OADgBC,IAAMM,IAAN,UAAaR,EAAb,YAAwBO,GAAMN,GAC/BG,MAAK,SAACC,GAAD,OAAcA,EAASC,SCVvCG,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAEF,qBAAKb,UAAU,QAAf,SAAwBa,KAG3BC,EAAS,WAMb,OACE,sBAAKC,MANa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAGV,UACE,uBACA,4GA8FSC,EAvFH,WAEV,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAEA,EAA8BF,mBAAS,iBAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAEA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAEMC,EAAcF,EAChBJ,EACAA,EAAMO,QAAO,SAAChC,GAAD,OAA6B,IAAnBA,EAAKG,aAChC,EAAwCqB,mBAAS,MAAjD,mBAAOS,EAAP,KAAqBC,EAArB,KAEAC,qBAAU,WAER1B,IAAM2B,IAAI,cAAczB,MAAK,SAAC0B,GAAD,OAASX,EAASW,EAAIxB,WAClD,IA4CH,OACE,gCACE,uCACA,cAAC,EAAD,CAAcI,QAASgB,IACvB,8BACE,yBAAQ3B,QAAS,kBAAMwB,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGE,EAAYO,KAAI,SAACtC,GAAD,OACf,cAAC,EAAD,CAEEA,KAAMA,EACNC,iBAAkB,kBAlCD,SAACa,GAC1ByB,QAAQC,IAAR,wBAA6B1B,EAA7B,yBACA,IAAMd,EAAOyB,EAAMgB,MAAK,SAACC,GAAD,OAAOA,EAAE5B,KAAOA,KAClC6B,EAAW,2BAAQ3C,GAAR,IAAcG,WAAYH,EAAKG,YAChDyC,EACU9B,EAAI6B,GACXhC,MAAK,SAACkC,GACLnB,EAASD,EAAMa,KAAI,SAACtC,GAAD,OAAWA,EAAKc,KAAOA,EAAKd,EAAO6C,SAEvDC,OAAM,SAACC,GACNb,EAAgB,aAAD,OACAlC,EAAKK,QADL,sCAGf2C,YAAW,WACTd,EAAgB,QACf,KACHR,EAASD,EAAMO,QAAO,SAACU,GAAD,OAAOA,EAAE5B,KAAOA,SAkBVmC,CAAmBjD,EAAKc,MAF3Cd,EAAKc,SAMhB,uBAAMoC,SA3DM,SAACC,GACfA,EAAMC,iBACNb,QAAQC,IAAI,iBAAkBW,EAAME,QACpC,IAAMC,EAAa,CACjBjD,QAASsB,EACT4B,MAAM,IAAIC,MAAOC,cACjBtD,UAAWuD,KAAKC,SAAW,IAG7Bf,EAAmBU,GAAY3C,MAAK,SAACiD,GACnClC,EAASD,EAAMoC,OAAOD,IACtBhC,EAAW,QAgDX,UACE,uBAAOkC,MAAOnC,EAASoC,SA7CJ,SAACZ,GACxBZ,QAAQC,IAAIW,EAAME,OAAOS,OACzBlC,EAAWuB,EAAME,OAAOS,UA4CpB,wBAAQE,KAAK,SAAb,qBAEF,cAAC,EAAD,Q,MCzGNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.9c3dc66a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important ? `make not important` : `make important`;\r\n  return (\r\n    <li className=\"note\">\r\n      {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Note;\r\n","import axios from \"axios\";\r\nconst baseUrl = `/api/notes`;\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst create = (newObject) => {\r\n  const request = axios.post(baseUrl, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nexport default { getAll, create, update };\r\n","import axios from \"axios\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Note from \"./components/Note\";\r\nimport noteService from \"./services/notes\";\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null;\r\n  }\r\n  return <div className=\"error\">{message}</div>;\r\n};\r\n\r\nconst Footer = () => {\r\n  const footerStyle = {\r\n    color: \"green\",\r\n    fontStyle: \"italic\",\r\n    fontSize: 16,\r\n  };\r\n  return (\r\n    <div style={footerStyle}>\r\n      <br />\r\n      <em>\r\n        Note app, Departement of Computer Science, University of Helsinki 2022\r\n      </em>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst App = () => {\r\n  // state notes\r\n  const [notes, setNotes] = useState([]);\r\n  // state new notes\r\n  const [newNote, setNewNote] = useState(\"a new note...\");\r\n  // state show only important\r\n  const [showAll, setShowAll] = useState(true);\r\n  // notes to show function\r\n  const notesToShow = showAll\r\n    ? notes\r\n    : notes.filter((note) => note.important === true);\r\n  const [errorMessage, setErrorMessage] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // noteService.getAll().then((initialNotes) => setNotes(initialNotes));\r\n    axios.get(\"/api/notes\").then((res) => setNotes(res.data));\r\n  }, []);\r\n\r\n  // event new notes\r\n  const addNote = (event) => {\r\n    event.preventDefault();\r\n    console.log(\"button clicked\", event.target);\r\n    const noteObject = {\r\n      content: newNote,\r\n      date: new Date().toISOString(),\r\n      important: Math.random() < 0.5,\r\n    };\r\n    // setNotes(notes.concat(noteObject));\r\n    noteService.create(noteObject).then((initialNotes) => {\r\n      setNotes(notes.concat(initialNotes));\r\n      setNewNote(``);\r\n    });\r\n  };\r\n  // event handle input/change note\r\n  const handleNoteChange = (event) => {\r\n    console.log(event.target.value);\r\n    setNewNote(event.target.value);\r\n  };\r\n\r\n  // toggle impotantance\r\n  const toggleImportanceOf = (id) => {\r\n    console.log(`importance of ${id} needs to be toggled`);\r\n    const note = notes.find((n) => n.id === id);\r\n    const changedNote = { ...note, important: !note.important };\r\n    noteService\r\n      .update(id, changedNote)\r\n      .then((returnedNote) => {\r\n        setNotes(notes.map((note) => (note.id !== id ? note : returnedNote)));\r\n      })\r\n      .catch((error) => {\r\n        setErrorMessage(\r\n          `the note \"${note.content}\" was already deleted from server`\r\n        );\r\n        setTimeout(() => {\r\n          setErrorMessage(null);\r\n        }, 5000);\r\n        setNotes(notes.filter((n) => n.id !== id));\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n      <Notification message={errorMessage} />\r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          show {showAll ? \"important\" : \"all\"}\r\n        </button>\r\n      </div>\r\n      <ul>\r\n        {notesToShow.map((note) => (\r\n          <Note\r\n            key={note.id}\r\n            note={note}\r\n            toggleImportance={() => toggleImportanceOf(note.id)}\r\n          />\r\n        ))}\r\n      </ul>\r\n      <form onSubmit={addNote}>\r\n        <input value={newNote} onChange={handleNoteChange} />\r\n        <button type=\"submit\">save</button>\r\n      </form>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}